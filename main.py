import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode

# Configuraci√≥n del logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# Estados para la conversaci√≥n
SELECTING_ACTION, TYPING_REPLY = range(2) # SELECTING_ACTION no se usa realmente aqu√≠, pero mantenemos la estructura

# Variables globales
TOKEN = None
GRUPO_ID = None # Grupo del Comit√©
BOT_USERNAME = None
GROUP_LINK = None

# IDs de los temas y grupos
TEMA_CONSULTAS_SUGERENCIAS = 272  # Tema en GRUPO_ID donde van los botones (¬°Este mensaje NO se editar√°!)
TEMA_CONSULTAS_EXTERNO = 69  # Tema de consultas en GRUPO_EXTERNO_ID
TEMA_SUGERENCIAS_EXTERNO = 71  # Tema de sugerencias en GRUPO_EXTERNO_ID
GRUPO_EXTERNO_ID = -1002433074372  # ID del grupo externo

# --- Validaci√≥n de Variables de Entorno ---
def validar_variables():
    global TOKEN, GRUPO_ID, BOT_USERNAME, GROUP_LINK
    try:
        TOKEN = os.environ["TELEGRAM_TOKEN"].strip()
        if not TOKEN or ":" not in TOKEN:
            raise ValueError("Formato de token inv√°lido")

        grupo_id_raw = os.environ["GROUP_ID"].strip()
        grupo_id_limpio = re.sub(r"[^-\d]", "", grupo_id_raw)
        GRUPO_ID = int(grupo_id_limpio)
        if not (GRUPO_ID < -100000000000):
             logger.warning(f"El GROUP_ID ({GRUPO_ID}) parece inusual, pero se continuar√°.")

        BOT_USERNAME = os.environ["BOT_USERNAME"].strip().lstrip('@')
        if not BOT_USERNAME:
            raise ValueError("BOT_USERNAME vac√≠o")

        GROUP_LINK = os.environ["GROUP_LINK"].strip()
        if not GROUP_LINK.startswith("https://t.me/"):
            raise ValueError("Enlace de grupo inv√°lido")

        logger.info(f"GRUPO_ID (Comit√©): {GRUPO_ID}")
        logger.info(f"TEMA_CONSULTAS_SUGERENCIAS (Comit√©): {TEMA_CONSULTAS_SUGERENCIAS}")
        logger.info(f"GRUPO_EXTERNO_ID: {GRUPO_EXTERNO_ID}")
        logger.info(f"TEMA_CONSULTAS_EXTERNO: {TEMA_CONSULTAS_EXTERNO}")
        logger.info(f"TEMA_SUGERENCIAS_EXTERNO: {TEMA_SUGERENCIAS_EXTERNO}")

        logger.info("‚úÖ Variables validadas correctamente")
        return True
    except KeyError as e:
        logger.critical(f"‚ùå Error de configuraci√≥n: Falta la variable de entorno {str(e)}")
        return False
    except ValueError as e:
         logger.critical(f"‚ùå Error de configuraci√≥n: {str(e)}")
         return False
    except Exception as e:
        logger.critical(f"‚ùå Error de configuraci√≥n inesperado: {str(e)}")
        return False

# --- Funciones del Bot ---

async def start(update: Update, context: CallbackContext) -> None:
    """
    Manejador del comando /start.
    Env√≠a el mensaje con botones al grupo/tema del comit√©.
    Este mensaje NO se modificar√° posteriormente.
    """
    user = update.effective_user
    logger.info(f"Comando /start recibido de {user.id} ({user.full_name})")

    mensaje = "Si necesitas mandar una consulta sobre algun tema no resuelto en el grupo(permisos, excedencias,etc..), presiona el bot√≥n Consulta.\n Por otro lado, si quieres hacer alguna sugerencia para mejorar el grupo, presiona el bot√≥n sugerencia"
    keyboard = [
        [InlineKeyboardButton("Consulta üôã‚Äç‚ôÇÔ∏è", callback_data='consulta')],
        [InlineKeyboardButton("Sugerencia üí°", callback_data='sugerencia')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=GRUPO_ID,
            message_thread_id=TEMA_CONSULTAS_SUGERENCIAS,
            text=mensaje,
            reply_markup=reply_markup
        )
        logger.info(f"Mensaje inicial con botones enviado a GRUPO_ID: {GRUPO_ID}, TEMA: {TEMA_CONSULTAS_SUGERENCIAS}")
    except Exception as e:
         logger.error(f"Error enviando mensaje inicial al grupo del comit√©: {e}")


async def button_callback(update: Update, context: CallbackContext) -> int:
    """
    Manejador para los botones inline. Inicia la conversaci√≥n privada.
    NO edita el mensaje original en el grupo del comit√©.
    """
    query = update.callback_query
    user = query.from_user
    action_type = query.data # 'consulta' o 'sugerencia'

    # Siempre responder al callback para quitar el "loading" del bot√≥n
    await query.answer()

    logger.info(f"Bot√≥n '{action_type}' presionado por {user.id} ({user.full_name}) en chat {query.message.chat_id}. Iniciando conversaci√≥n privada.")

    # Guardar qu√© acci√≥n se seleccion√≥ para usarla al recibir la respuesta
    context.user_data['action_type'] = action_type
    # Ya NO necesitamos guardar el ID del mensaje original

    prompt_message = f"Has seleccionado '{action_type}'. Por favor, escribe tu mensaje ahora. Env√≠alo como un mensaje normal en este chat."

    try:
        # Env√≠a el mensaje de solicitud al usuario EN PRIVADO
        await context.bot.send_message(chat_id=user.id, text=prompt_message)
        logger.info(f"Solicitud de texto enviada en privado a {user.id} para '{action_type}'")
        # Pasa al estado donde esperamos la respuesta del usuario
        return TYPING_REPLY
    except Exception as e:
        logger.error(f"Error en button_callback al enviar mensaje privado a {user.id}: {e}")
        # Informar al usuario del error si es posible (ya que no podemos editar el original)
        try:
             await context.bot.send_message(chat_id=user.id, text="Hubo un error al iniciar el proceso. Por favor, intenta pulsar el bot√≥n de nuevo o contacta a un administrador.")
        except Exception as inner_e:
            logger.error(f"Error adicional notificando error en button_callback a {user.id}: {inner_e}")
        # Terminar la conversaci√≥n si hay error al iniciarla
        context.user_data.clear()
        return ConversationHandler.END


async def receive_text(update: Update, context: CallbackContext) -> int:
    """
    Recibe el texto de la consulta/sugerencia del usuario en el chat privado.
    Lo env√≠a al grupo/tema externo correspondiente.
    Confirma al usuario en privado.
    NO edita el mensaje original en el grupo del comit√©.
    """
    user = update.effective_user
    user_text = update.message.text
    action_type = context.user_data.get('action_type')

    if not action_type:
        logger.warning(f"receive_text llamado sin action_type en user_data para {user.id}. Posiblemente la conversaci√≥n expir√≥ o hubo un error.")
        await update.message.reply_text("Algo sali√≥ mal, no recuerdo qu√© estabas enviando. Por favor, vuelve al grupo del comit√© y pulsa el bot√≥n de nuevo.")
        return ConversationHandler.END

    logger.info(f"Texto recibido de {user.id} para '{action_type}': {user_text[:50]}...")

    # Determinar destino
    if action_type == 'consulta':
        target_chat_id = GRUPO_EXTERNO_ID
        target_thread_id = TEMA_CONSULTAS_EXTERNO
    elif action_type == 'sugerencia':
        target_chat_id = GRUPO_EXTERNO_ID
        target_thread_id = TEMA_SUGERENCIAS_EXTERNO
    else:
        logger.error(f"Tipo de acci√≥n desconocido '{action_type}' en receive_text para {user.id}")
        await update.message.reply_text("Error interno. Tipo de acci√≥n desconocida.")
        context.user_data.clear()
        return ConversationHandler.END

    # Formatear mensaje para el grupo externo
    user_info = f"{user.full_name}" + (f" (@{user.username})" if user.username else "") + f" (ID: {user.id})"
    forward_message = f"‚ÑπÔ∏è **Nueva {action_type.capitalize()} de {user_info}**:\n\n" \
                      f"{user_text}"

    try:
        # Enviar al grupo/tema externo
        await context.bot.send_message(
            chat_id=target_chat_id,
            message_thread_id=target_thread_id,
            text=forward_message,
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"{action_type.capitalize()} de {user.id} enviada a chat {target_chat_id} (tema {target_thread_id})")

        # Confirmar al usuario EN PRIVADO
        await update.message.reply_text(f"‚úÖ ¬°Tu {action_type} ha sido enviada correctamente al grupo correspondiente!")
        logger.info(f"Confirmaci√≥n enviada en privado a {user.id}")

        # --- YA NO SE EDITA EL MENSAJE ORIGINAL ---

    except Exception as e:
        logger.error(f"Error enviando la {action_type} de {user.id} al grupo externo: {e}")
        # Informar al usuario del error EN PRIVADO
        await update.message.reply_text(f"‚ùå Hubo un error al enviar tu {action_type}. Por favor, contacta a un administrador o int√©ntalo de nuevo m√°s tarde.")

    finally:
        # Limpiar datos de usuario y terminar conversaci√≥n
        context.user_data.clear()
        return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    """
    Cancela la operaci√≥n actual (en la conversaci√≥n privada).
    NO necesita restaurar el mensaje original.
    """
    user = update.effective_user
    logger.info(f"Usuario {user.id} ({user.full_name}) cancel√≥ la conversaci√≥n privada.")

    await update.message.reply_text('Operaci√≥n cancelada. Puedes volver al grupo del comit√© si quieres iniciar de nuevo.')

    # --- YA NO SE RESTAURA EL MENSAJE ORIGINAL ---

    context.user_data.clear()
    return ConversationHandler.END

# --- Configuraci√≥n y Ejecuci√≥n ---
def main() -> None:
    """Inicia el bot."""
    if not validar_variables():
       logger.critical("Deteniendo el bot debido a errores de configuraci√≥n.")
       return

    application = Application.builder().token(TOKEN).build()

    # --- Conversation Handler ---
    conv_handler = ConversationHandler(
        entry_points=[
            # Se activa SOLO con los botones del mensaje enviado por /start
            CallbackQueryHandler(button_callback, pattern='^(consulta|sugerencia)$')
            ],
        states={
            # Espera un mensaje de texto EN PRIVADO despu√©s de pulsar un bot√≥n
            TYPING_REPLY: [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, receive_text)],
        },
        fallbacks=[
            # Permite cancelar EN PRIVADO
            CommandHandler('cancel', cancel, filters=filters.ChatType.PRIVATE)
            ],
        # Configuraci√≥n para que la conversaci√≥n ocurra por usuario y no por chat
        # (importante porque el entry point est√° en un grupo pero el state est√° en privado)
        per_user=True,
        per_chat=False, # La conversaci√≥n sigue al usuario, no al chat donde empez√≥
        # Opcional: Timeout para la conversaci√≥n privada
        # conversation_timeout=60*10 # 10 minutos para responder en privado
    )

    # A√±adir handlers
    application.add_handler(CommandHandler("start", start)) # Comando inicial
    application.add_handler(conv_handler) # Manejador de la conversaci√≥n

    logger.info("Iniciando polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("Bot detenido.")

if __name__ == '__main__':
    main()
